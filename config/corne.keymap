/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/ {
	behaviors {
		tdyo: tap_dance_yo {
			compatible = "zmk,behavior-tap-dance";
			label = "TAP_DANCE_YO";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp T>, <&kp TILDE>;
		};

		tdtz: tap_dance_tz {
			compatible = "zmk,behavior-tap-dance";
			label = "TAP_DANCE_TZ";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp M>, <&kp RBKT>;
		};

		tdye: tap_dance_ye {
			compatible = "zmk,behavior-tap-dance";
			label = "TAP_DANCE_YE";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp SEMI>, <&kp SQT>;
		};

		tdha: tap_dance_ha {
			compatible = "zmk,behavior-tap-dance";
			label = "TAP_DANCE_HA";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp P>, <&kp LBKT>;
		};

		tdcll: tap_dance_cll {
			compatible = "zmk,behavior-tap-dance";
			label = "TAP_DANCE_CapsLockL";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp LSHFT>, <&kp CAPS>;
		};

		tdclr: tap_dance_clr {
			compatible = "zmk,behavior-tap-dance";
			label = "TAP_DANCE_CapsLockR";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp LSHFT>, <&kp CAPS>;
		};
	};
        
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |ESC     |Q       |W       |E       |R       |T       |       |Y       |U       |I       |O       |P       |BKSP    |
// |SHFT    |A       |S       |D       |F       |G       |       |H       |J       |K       |L       |;       |SHFT    |
// |CTRL    |Z       |X       |C       |V       |B       |       |N       |M       |,       |.       |"       |CTRL    |
//                            |GUI     |ALT     |SPC (M1)|       |ENT (M1)|ALT     |GUI     |
                        bindings = <
&kp ESC     &kp Q       &kp W       &kp E       &kp R       &tdyo              &kp Y       &kp U       &kp I       &kp O       &tdha       &kp BSPC
&tdcll      &kp A       &kp S       &kp D       &kp F       &kp G              &kp H       &kp J       &kp K       &kp L       &tdye       &tdclr
&kp LCTRL   &kp Z       &kp X       &kp C       &kp V       &kp B              &kp N       &tdtz       &kp COMMA   &kp DOT     &kp DQT     &kp RCTRL
                                    &kp LGUI    &kp LALT    &lt 1 SPACE        &lt 1 RET   &kp RALT    &kp RGUI
                        >;
                };
                n1_layer {
// -----------------------------------------------------------------------------------------
// |TAB     |1       |2       |3       |4       |5       |       |[       |(       |UP      |{       |<       |Del     |
// |        |6       |7       |8       |9 (M2)  |0       |       |:       |LFT (M2)|DWN     |RGT     |;       |        |
// |        |/       |*       |-       |+       |.       |       |_       |=       |,       |.       |"       |        |
//                            |        |        |SPC (M3)|       |ENT (M3)|        |        |
                        bindings = <
&kp TAB         &kp N1          &kp N2          &kp N3          &kp N4          &kp N5                 &kp LBKT        &kp LPAR        &kp UP          &kp LBRC        &kp LT          &kp DEL
&trans          &kp N6          &kp N7          &kp N8          &lt 2 N9        &kp N0                 &kp COLON       &lt 2 LEFT      &kp DOWN        &kp RIGHT       &kp SEMI        &trans
&trans          &kp FSLH        &kp KP_MULTIPLY &kp MINUS       &kp PLUS        &kp DOT                &kp UNDER       &kp EQUAL       &kp COMMA       &kp DOT         &kp DQT         &trans
                                                &trans          &trans          &lt 3 SPACE            &lt 3 RET       &trans          &trans
                        >;
                };
                n2_layer {
// -----------------------------------------------------------------------------------------
// |        |F1      |F2      |F3      |F4      |F5      |       |]       |)       |PgUp    |}       |>       |        |
// |        |F6      |F7      |F8      |F9      |F10     |       |&       |Home    |PgDn    |End     ||       |        |
// |        |F11     |F12     |F13     |F14     |F15     |       |@       |#       |?       |!       |'       |        |
//                            |        |        |SPC (M3)|       |ENT (M3)|        |        |
                        bindings = <
&trans      &kp F1      &kp F2      &kp F3      &kp F4      &kp F5             &kp RBKT    &kp RPAR    &kp PG_UP   &kp RBRC    &kp GT      &trans
&trans      &kp F6      &kp F7      &kp F8      &kp F9      &kp F10            &kp AMPS    &kp HOME    &kp PG_DN   &kp END     &kp PIPE    &trans
&trans      &kp F11     &kp F12     &kp F13     &kp F14     &kp F15            &kp AT      &kp HASH    &kp QMARK   &kp EXCL    &kp SQT     &trans
                                    &trans      &trans      &lt 3 SPACE        &lt 3 RET   &trans      &trans
                        >;
                };
                n3_layer {
// -----------------------------------------------------------------------------------------
// |        |BTCLR   |BT1     |BT2     |BT3     |BT4     |       |Insert  |PrtScr  |Pause   |Caps    |ScrLock |        |
// |        |F16     |F17     |VolDwn  |VolUp   |Mute    |       |`       |$       |\       |^       |%       |        |
// |        |F18     |OUT_BLE |SkpBck  |SkpFrw  |PlayPaus|       |~       |Ё       |Э       |Х       |Ъ       |        |
//                            |        |        |        |       |        |        |        |
                        bindings = <
&trans          &bt BT_CLR      &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3           &kp INS         &kp PSCRN       &kp PAUSE_BREAK &kp CAPS        &kp SLCK        &trans
&trans          &kp F16         &kp F17         &kp C_VOL_DN    &kp C_VOL_UP    &kp C_MUTE             &kp GRAVE       &kp DLLR        &kp BSLH        &kp CARET       &kp PRCNT       &trans
&trans          &kp F18         &out OUT_BLE    &kp C_PREV      &kp C_NEXT      &kp C_PP               &kp TILDE       &kp GRAVE       &kp SQT         &kp LBKT        &kp RBKT        &trans
                                                &trans          &trans          &trans                 &trans          &trans          &trans
                        >;
                };
        };
};
